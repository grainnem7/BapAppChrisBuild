@page "/viewdata"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger

<h1>View Data </h1>



<div class="row">
    <EditForm class="form-inline my-2" Model="@searchModel" OnValidSubmit="SearchStore">
        <InputText class="form-control rounded" id="name" @bind-Value="searchModel.Name" size="22" placeholder="Search all Apps & Categories" />
        <button class="btn btn-outline-primary" type="button" @onclick="EnterSearch">Search</button>
    </EditForm>
</div>

<div class="row">
<button class="btn btn-primary" @onclick="Previous">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="Next">Next</button>
</div>
@if (StoreApps == null)
{
    <p><em>Loading...</em></p>
}
else

{
    <table class="table">
        <thead>
            <tr>
                <td class="sort-link" @onclick=@(() => SortTable("Id"))>Id </td>

                <td class="sort-link" @onclick=@(() => SortTable("Name"))>Name</td>

                <td class="sort-link" @onclick=@(() => SortTable("Rating"))>Rating</td>

                <td class="sort-link" @onclick=@(() => SortTable("People"))>People</td>

                <td class="sort-link" @onclick=@(() => SortTable("Category"))>Category</td>


                <td class="sort-link" @onclick=@(() => SortTable("Date"))>Date</td>

                <td class="sort-link" @onclick=@(() => SortTable("Price"))>Price</td>

            </tr>
        </thead>
        <tbody>
            @foreach (var storeapp in StoreApps)
            {
                if (StoreApps.IndexOf(storeapp) >= pageStart && StoreApps.IndexOf(storeapp) < pageEnd)
                {
                    <tr class="justify-content-space-evenly">
                        <td>@storeapp.Id</td>
                        <td>@storeapp.Name</td>
                        <td>@storeapp.Rating</td>
                        <td>@storeapp.People</td>
                        <td>@storeapp.Category</td>
                        <td>@storeapp.Date</td>
                        <td>@storeapp.Price</td>


                    </tr>
                }
            }
        </tbody>
    </table>
}
<button class="btn btn-primary" @onclick="Previous">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="Next">Next</button>

@code {


    private SearchModel searchModel = new();

    private void SearchStore()
    {
        Logger.LogInformation("SearchStore called");
        Logger.LogInformation(searchModel.Name);
    }

    public void EnterSearch()
    {
        GetSearch(searchModel.Name);
    }

    public async Task GetSearch(string search)
    {
        var apiName = "api/StoreApps/Search?searchTerm=" + search;

        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();

            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);

            StateHasChanged();
        }
    }


    private string responseBody = "";
    private bool IsSortedAscending;
    private string CurrentSortColumn;

    List<StoreApp> StoreApps = new List<StoreApp>();



    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }
    }
    private int pageStart = 0;
    private int pageEnd = 25;
    private int pagerSize = 25;

    private void Next()
    {
        pageStart += pagerSize;
        pageEnd += pagerSize;
    }

    private void Previous()
    {
        pageStart -= pagerSize;
        pageEnd -= pagerSize;

    }


    private void SortTable(string columnName)
    {





        //if (columnName != CurrentSortColumn)
        //{
        //    //We need to force order by descending on the new column
        //    StoreApps = StoreApps.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        //    CurrentSortColumn = columnName;
        //    IsSortedAscending = true;

        //}

        if (IsSortedAscending)

        {

            foreach (var storeapp in StoreApps)
            {
                String sourceDate = storeapp.Date;
                DateTime dateNew = DateTime.Parse(storeapp.Date);
                string formatted = dateNew.ToString("yyyy/MM/dd");
                storeapp.Date = formatted;
            }

            StoreApps = StoreApps.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        }
        else
        {
            foreach (var storeapp in StoreApps)
            {
                String sourceDate = storeapp.Date;
                DateTime dateNew = DateTime.Parse(storeapp.Date);
                string formatted = dateNew.ToString("yyyy/MM/dd");
                storeapp.Date = formatted;
            }
            StoreApps = StoreApps.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        }

        IsSortedAscending = !IsSortedAscending;

    }
}
