@page "/viewdata"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger

<h1>View Data </h1>

<div class="row">
    <EditForm class="form-inline my-2" Model="@searchModel" OnValidSubmit="SearchStore">
        <InputText class="form-control rounded" id="name" @bind-Value="searchModel.Name" size="22" placeholder="Search all Apps & Categories" />
        <button class="btn btn-outline-primary" type="button" @onclick="EnterSearch">Search</button>
    </EditForm>
</div>

<div class="row">
    <button class="btn btn-primary" @onclick="Previous">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="Next">Next</button>
</div>
@if (StoreApps == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            @*Creates links to sort data by clickable column names*@
            <tr>
                <td class="sort-link" @onclick=@(() => SortTableById())>Id </td>
                <td class="sort-link" @onclick=@(() => SortTableByName())>Name</td>
                <td class="sort-link" @onclick=@(() => SortTableByRating())>Rating</td>
                <td class="sort-link" @onclick=@(() => SortTableByPeople())>People</td>
                <td class="sort-link" @onclick=@(() => SortTableByCategory())>Category</td>
                <td class="sort-link" @onclick=@(() => SortTableByDate())>Date</td>
                <td class="sort-link" @onclick=@(() => SortTableByPrice())>Price</td>
            </tr>
        </thead>
        <tbody>
            @*Loop through apps and display data*@
            @foreach (var storeapp in StoreApps)
            {
                if (StoreApps.IndexOf(storeapp) >= pageStart && StoreApps.IndexOf(storeapp) < pageEnd)
                {
                    <tr class="justify-content-space-evenly">
                        <td>@storeapp.Id</td>
                        <td>@storeapp.Name</td>
                        <td>@storeapp.Rating</td>
                        <td>@storeapp.People</td>
                        <td>@storeapp.Category</td>
                        <td>@storeapp.Date</td>
                        <td>@storeapp.Price</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
<button class="btn btn-primary" @onclick="Previous">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="Next">Next</button>

@code {


    private SearchModel searchModel = new();

    private void SearchStore()
    {
        Logger.LogInformation("SearchStore called");
        Logger.LogInformation(searchModel.Name);
    }

    public void EnterSearch()
    {
        GetSearch(searchModel.Name);
    }

    public async Task GetSearch(string search)
    {
        var apiName = "api/StoreApps/Search?searchTerm=" + search;

        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();

            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);

            StateHasChanged();
        }
    }

    private string responseBody = "";
    private bool IsSortedAscending;
    private string CurrentSortColumn;

    List<StoreApp> StoreApps = new List<StoreApp>();

    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }
    }
    private int pageStart = 0;
    private int pageEnd = 25;
    private int pagerSize = 25;

    //to move to next page
    private void Next()
    {


        pageStart += pagerSize;
        pageEnd += pagerSize;

    }


    private void Previous()
    {
        if (pageStart > 0)
        {
            pageStart -= pagerSize;
            pageEnd -= pagerSize;
        }
    }

    /// <summary>
    /// Sorting methods use the isSortedAscending and if/else to determine whether to sort ascending or descending
    /// </summary>
    public void SortTableById()
    {
        if (IsSortedAscending)
        {
            StoreApps.Sort((x, y) => x.Id.CompareTo(y.Id));
        }
        else
        {
            StoreApps.Sort((x, y) => y.Id.CompareTo(x.Id));
        }

        IsSortedAscending = !IsSortedAscending;
    }

    public void SortTableByName()
    {

        if (IsSortedAscending)
        {
            StoreApps.Sort((x, y) => x.Name.CompareTo(y.Name));
        }

        else
        {
            StoreApps.Sort((x, y) => y.Name.CompareTo(x.Name));
        }

        IsSortedAscending = !IsSortedAscending;
    }

    public void SortTableByRating()
    {
        if (IsSortedAscending)
        {
            StoreApps.Sort((x, y) => x.Rating.CompareTo(y.Rating));
        }
        else
        {
            StoreApps.Sort((x, y) => y.Rating.CompareTo(x.Rating));
        }

        IsSortedAscending = !IsSortedAscending;
    }

    public void SortTableByPeople()
    {
        if (IsSortedAscending)
        {
            StoreApps.Sort((x, y) => x.People.CompareTo(y.People));
        }
        else
        {
            StoreApps.Sort((x, y) => y.People.CompareTo(x.People));
        }

        IsSortedAscending = !IsSortedAscending;
    }

    public void SortTableByCategory()
    {
        if (IsSortedAscending)
        {
            StoreApps.Sort((x, y) => x.Category.CompareTo(y.Category));
        }
        else
        {
            StoreApps.Sort((x, y) => y.Category.CompareTo(x.Category));
        }

        IsSortedAscending = !IsSortedAscending;
    }

    public void SortTableByDate()
    {
        foreach (var storeapp in StoreApps)
        {
            string sourceDate = storeapp.Date;
            DateTime sourceDatenew = DateTime.Parse(storeapp.Date);
            string formatted = sourceDatenew.ToString("yyyy/MM/dd");
            storeapp.Date = formatted;
        }
        if (IsSortedAscending)
        {
            StoreApps.Sort((x, y) => x.Date.CompareTo(y.Date));
        }
        else
        {
            StoreApps.Sort((x, y) => y.Category.CompareTo(x.Category));
        }

        IsSortedAscending = !IsSortedAscending;
    }

    public void SortTableByPrice()
    {
        if (IsSortedAscending)
        {
            StoreApps.Sort((x, y) => x.Price.CompareTo(y.Price));
        }
        else
        {
            StoreApps.Sort((x, y) => y.Price.CompareTo(x.Price));
        }

        IsSortedAscending = !IsSortedAscending;
    }
}