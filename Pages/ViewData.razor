@page "/viewdata"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json


@using Microsoft.Extensions.Logging


<h1>View Data </h1>


<div class="row">
    <button class="btn btn-primary" @onclick="Previous">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="Next">Next</button>
</div>
@if (Ponds == null)
{
    <p><em>Loading...</em></p>
} 
else
{
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Pond_Id</th>
                        <th>Start_Date</th>
                        <th>Intial_Population</th>
                        <th>Intial_Average_Weight</th>
                        <th>Estimated_End_Date</th>                  
                    </tr>
            </thead>
            <tbody>
                @foreach (var pond in Ponds)
                {
                    <tr class="justify-content-center">
                        <td>@pond.ID</td>
                        <td>@pond.PondID</td>
                        <td>@pond.Start_Date</td>
                        <td>@pond.Intial_Population</td>
                        <td>@pond.Intial_Average_Weight</td>
                        <td>@pond.Estimated_End_Date</td>
                    </tr>
                }  
                
            </tbody>
        </table>
    }
       




<button class="btn btn-primary" @onclick="Previous">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="Next">Next</button>

@code {

  

   

    private string responseBody = "";
    private bool IsSortedAscending;
    private string CurrentSortColumn;

    List<PondData> Ponds = new List<PondData>();

    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/Pond";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            Ponds = JsonConvert.DeserializeObject<List<PondData>>(responseBody);
            StateHasChanged();
        }
    }
    private int pageStart = 0;
    private int pageEnd = 25;
    private int pagerSize = 25;

    //to move to next page
    private void Next()
    {


        pageStart += pagerSize;
        pageEnd += pagerSize;

    }


    private void Previous()
    {
        if (pageStart > 0)
        {
            pageStart -= pagerSize;
            pageEnd -= pagerSize;
        }
    }

    /// <summary>
    /// Sorting methods use the isSortedAscending and if/else to determine whether to sort ascending or descending
    /// </summary>
    //public void SortTableById()
    //{
    //    if (IsSortedAscending)
    //    {
    //        Ponds.Sort((x, y) => x.Id.CompareTo(y.Id));
    //    }
    //    else
    //    {
    //        Ponds.Sort((x, y) => y.Id.CompareTo(x.Id));
    //    }

    //    IsSortedAscending = !IsSortedAscending;
    //}

    //public void SortTableByName()
    //{

    //    if (IsSortedAscending)
    //    {
    //        Ponds.Sort((x, y) => x.Name.CompareTo(y.Name));
    //    }

    //    else
    //    {
    //        Ponds.Sort((x, y) => y.Name.CompareTo(x.Name));
    //    }

    //    IsSortedAscending = !IsSortedAscending;
    //}

    //public void SortTableByRating()
    //{
    //    if (IsSortedAscending)
    //    {
    //        Ponds.Sort((x, y) => x.Rating.CompareTo(y.Rating));
    //    }
    //    else
    //    {
    //        Ponds.Sort((x, y) => y.Rating.CompareTo(x.Rating));
    //    }

    //    IsSortedAscending = !IsSortedAscending;
    //}

    //public void SortTableByPeople()
    //{
    //    if (IsSortedAscending)
    //    {
    //        Ponds.Sort((x, y) => x.People.CompareTo(y.People));
    //    }
    //    else
    //    {
    //        Ponds.Sort((x, y) => y.People.CompareTo(x.People));
    //    }

    //    IsSortedAscending = !IsSortedAscending;
    //}

    //public void SortTableByCategory()
    //{
    //    if (IsSortedAscending)
    //    {
    //        Ponds.Sort((x, y) => x.Category.CompareTo(y.Category));
    //    }
    //    else
    //    {
    //        Ponds.Sort((x, y) => y.Category.CompareTo(x.Category));
    //    }

    //    IsSortedAscending = !IsSortedAscending;
    //}

    //public void SortTableByDate()
    //{
    //    foreach (var storeapp in Ponds)
    //    {
    //        string sourceDate = storeapp.Date;
    //        DateTime sourceDatenew = DateTime.Parse(storeapp.Date);
    //        string formatted = sourceDatenew.ToString("yyyy/MM/dd");
    //        storeapp.Date = formatted;
    //    }
    //    if (IsSortedAscending)
    //    {
    //        Ponds.Sort((x, y) => x.Date.CompareTo(y.Date));
    //    }
    //    else
    //    {
    //        Ponds.Sort((x, y) => y.Category.CompareTo(x.Category));
    //    }

    //    IsSortedAscending = !IsSortedAscending;
    //}

    //public void SortTableByPrice()
    //{
    //    if (IsSortedAscending)
    //    {
    //        Ponds.Sort((x, y) => x.Price.CompareTo(y.Price));
    //    }
    //    else
    //    {
    //        StoreApps.Sort((x, y) => y.Price.CompareTo(x.Price));
    //    }

    //    IsSortedAscending = !IsSortedAscending;
    //}
}