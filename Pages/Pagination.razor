@page "/pagination"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<h1>Pagination & Sorting </h1>

<p>This component demonstrates pagination and sorting of the dataset</p>

<button class="btn btn-primary" @onclick="Previous">Previous</button> &nbsp; <button class="btn btn-primary" @onclick="Next">Next</button>

@if (StoreApps == null)
{
    <p><em>Loading...</em></p>
}
else

{
    <table class="table">
        <thead>
            <tr>
                <td class="sort-link" @onclick=@(() => SortTable("Id"))>Id </td>

                <td class="sort-link" @onclick=@(() => SortTable("Name"))>Name</td>

                <td class="sort-link" @onclick=@(() => SortTable("Rating"))>Rating</td>

                <td class="sort-link" @onclick=@(() => SortTable("People"))>People</td>

                <td class="sort-link" @onclick=@(() => SortTable("Category"))>Category</td>

                <td class="sort-link" @onclick=@(() => SortTable("Date"))>Date</td>

                <td class="sort-link" @onclick=@(() => SortTable("Price"))>Price</td>

            </tr>
        </thead>
        <tbody>
            @foreach (var storeapp in StoreApps)
            {
                if (StoreApps.IndexOf(storeapp) >= pageStart && StoreApps.IndexOf(storeapp) < pageEnd)
                {
                    <tr class="justify-content-space-evenly">
                        <td>@storeapp.Id</td>
                        <td>@storeapp.Name</td>
                        <td>@storeapp.Rating</td>
                        <td>@storeapp.People</td>
                        <td>@storeapp.Category</td>
                        <td>@storeapp.Date</td>
                        <td>@storeapp.Price</td>


                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    string responseBody = "";
    private bool IsSortedAscending;
    private string CurrentSortColumn;

    List<StoreApp> StoreApps = new List<StoreApp>();

    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }
    }
    private int pageStart = 0;
    private int pageEnd = 10;
    private int pagerSize = 10;

    private void Next()
    {
        pageStart += pagerSize;
        pageEnd += pagerSize;
    }

    private void Previous()
    {
        pageStart -= pagerSize;
        pageEnd -= pagerSize;

    }
    private void SortTable(string columnName)
    {
        //if (columnName != CurrentSortColumn)
        //{
        //    //We need to force order by descending on the new column
        //    StoreApps = StoreApps.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        //    CurrentSortColumn = columnName;
        //    IsSortedAscending = true;

        //}

        if (IsSortedAscending)
        {
            StoreApps = StoreApps.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        }
        else
        {
            StoreApps = StoreApps.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        }

        IsSortedAscending = !IsSortedAscending;

    }
}