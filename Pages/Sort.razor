@page "/sort"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data



<h1>To-Do List</h1>

@if (StoreApps == null)
{
    <p><em>Loading...</em></p>
}
else if (!StoreApps.Any())
{
    <p><em>No items to show</em></p>
}
else
{



    <div class="container-fluid">

        <div class="row justify-content-center" style="margin-bottom:50px">
            <h3 class="text-center">Store Apps - First Ten Records</h3>
        </div>

        <div class="row" style="margin:25px;">

            <table class="table table-bordered table-striped">
                <thead>
                    <tr>

                        
                            <td class="sort-link" @onclick=@(() => SortTable("Id"))>Id </td>
                       
                            <td class="sort-link" @onclick=@(() => SortTable("Name"))>Name</td>
                          
                             <td class="sort-link" @onclick=@(() => SortTable("Rating"))>Rating</td>
                          
                            <td class="sort-link" @onclick=@(() => SortTable("People"))>People</td>
                          
                            <td class="sort-link" @onclick=@(() => SortTable("Category"))>Category</td>
                           
                            <td class="sort-link" @onclick=@(() => SortTable("Date"))>Date</td>
                           
                            <td class="sort-link" @onclick=@(() => SortTable("Price"))>Price</td>  
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {
                        <tr style="caption-side">
                            @*<td><button @onclick="(() => RemoveTodo(item.ID))"><i class="oi oi-trash"></i></button></td>*@
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>
                            @*<td>
                                    @if (item.IsComplete)
                                    {
                                        <input type=checkbox @onchange="(() => ToggleToDo(item.ID))" checked />
                                    }
                                    else
                                    {
                                        <input type=checkbox @onchange="(() => ToggleToDo(item.ID))" />
                                    }
                                </td>*@
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>

}

@*@if (StoreApps != null)
    {


    }*@

@code{
    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();
    private bool IsSortedAscending;
    private string CurrentSortColumn;

    /// <summary>
    /// This method is responsible for loading the initial data the page requires.  We store this sample data
    /// in a JSON file.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps/";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }

    }

    ///// <summary>
    ///// This method adds a new ToDo item.
    ///// </summary>
    //private void AddTodo()
    //{
    //    if (!string.IsNullOrWhiteSpace(newItem))
    //    {
    //        var newToDoItem = new ToDoItem()
    //        {
    //            DateCreated = DateTime.Now,
    //            Description = newItem,
    //            ID = Guid.NewGuid()
    //        };

    //        items = ToDoService.Add(newToDoItem);

    //        newItem = string.Empty; //We need to reset this string, otherwise the text box will still contain the value typed in.
    //    }
    //}

    //private void ToggleToDo(Guid id)
    //{
    //    items = ToDoService.Toggle(id);
    //}

    //private void RemoveTodo(Guid id)
    //{
    //    items = ToDoService.Delete(id);
    //}

    //private string GetSortStyle(string columnName)
    //{
    //    //if (CurrentSortColumn != columnName)
    //    //{
    //    //    return string.Empty;
    //    //}
    //    if (IsSortedAscending)
    //    {
    //        return "fa-sort-up";
    //    }
    //    else
    //    {
    //        return "fa-sort-down";
    //    }
    //}

    private void SortTable(string columnName)
    {
        //if (columnName != CurrentSortColumn)
        //{
        //    //We need to force order by descending on the new column
        //    StoreApps = StoreApps.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        //    CurrentSortColumn = columnName;
        //    IsSortedAscending = true;

        //}

        if (IsSortedAscending)
        {
            StoreApps = StoreApps.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        }
        else
        {
            StoreApps = StoreApps.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        }

        IsSortedAscending = !IsSortedAscending;

    }
}
