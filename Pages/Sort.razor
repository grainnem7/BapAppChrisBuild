@page "/sort"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data



<h1>To-Do List</h1>

@if (StoreApps == null)
{
    <p><em>Loading...</em></p>
}
else if (!StoreApps.Any())
{
    <p><em>No ToDo items exist.  Please add some.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
 
                <th>
                    <span class="sort-link" @onclick=@(() => SortTable("Id"))>Id</span>
                    <span class="fa @(GetSortStyle("Id"))"></span>
                </th>
                <th>
                    <span class="sort-link" @onclick=@(() => SortTable("Name"))>Name</span>
                    <span class="fa @(GetSortStyle("Name"))"></span>
                </th>
                <th>
                    <span class="sort-link" @onclick=@(() => SortTable("Rating"))>Rating</span>
                    <span class="fa @(GetSortStyle("Rating"))"></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var storeapp in StoreApps)
            {
            <tr style="caption-side">
                @*<td><button @onclick="(() => RemoveTodo(item.ID))"><i class="oi oi-trash"></i></button></td>*@
                <td>@storeapp.Id</td>
                <td>@storeapp.Name</td>
                <td>@storeapp.Rating</td>
                @*<td>
            @if (item.IsComplete)
            {
                <input type=checkbox @onchange="(() => ToggleToDo(item.ID))" checked />
            }
            else
            {
                <input type=checkbox @onchange="(() => ToggleToDo(item.ID))" />
            }
        </td>*@
            </tr>
            }
        </tbody>
    </table>
}

@*@if (StoreApps != null)
{
    
    
}*@

@code{
    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();
    private bool IsSortedAscending;
    private string CurrentSortColumn;

    /// <summary>
    /// This method is responsible for loading the initial data the page requires.  We store this sample data
    /// in a JSON file.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var apiName = "api/StoreApps/";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }

    }

    ///// <summary>
    ///// This method adds a new ToDo item.
    ///// </summary>
    //private void AddTodo()
    //{
    //    if (!string.IsNullOrWhiteSpace(newItem))
    //    {
    //        var newToDoItem = new ToDoItem()
    //        {
    //            DateCreated = DateTime.Now,
    //            Description = newItem,
    //            ID = Guid.NewGuid()
    //        };

    //        items = ToDoService.Add(newToDoItem);

    //        newItem = string.Empty; //We need to reset this string, otherwise the text box will still contain the value typed in.
    //    }
    //}

    //private void ToggleToDo(Guid id)
    //{
    //    items = ToDoService.Toggle(id);
    //}

    //private void RemoveTodo(Guid id)
    //{
    //    items = ToDoService.Delete(id);
    //}

    private string GetSortStyle(string columnName)
    {
        //if (CurrentSortColumn != columnName)
        //{
        //    return string.Empty;
        //}
        if (IsSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SortTable(string columnName)
    {
        //if (columnName != CurrentSortColumn)
        //{
        //    //We need to force order by descending on the new column
        //    StoreApps = StoreApps.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        //    CurrentSortColumn = columnName;
        //    IsSortedAscending = true;

            //}
       
            if (IsSortedAscending)
            {
                StoreApps = StoreApps.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
            }
            else
            {
                StoreApps = StoreApps.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
            }

            IsSortedAscending = !IsSortedAscending;
        
    }
}
