
@page "/search"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@*@using Data*@

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger

<div class="container-fluid">
    <EditForm class="form-inline my-2" Model="@searchModel" OnValidSubmit="SearchStore">
        <InputText class="form-control rounded" id="name" @bind-Value="searchModel.Name" placeholder="Search all Apps & Categories" />
        <button class="btn btn-outline-primary" type="button" @onclick="EnterSearch">Search</button>
    </EditForm>
</div>

<div class="row justify-content-center" style="margin-bottom:50px">
    <h3 class="text-center">Store Apps - Search Results</h3>
</div>

<div class="row" style="margin:25px;">
    @if (StoreApps != null)
    {
        <table class="table table-bordered table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Rating</th>
                    <th>People</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var storeapp in StoreApps)
                {
                    <tr class="justify-content-center">
                        <td>@storeapp.Id</td>
                        <td>@storeapp.Name</td>
                        <td>@storeapp.Rating</td>
                        <td>@storeapp.People</td>
                        <td>@storeapp.Category</td>
                        <td>@storeapp.Date</td>
                        <td>@storeapp.Price</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (!StoreApps.Any())
    {
        <div class="justify-content-center">
            <h5>No records to show</h5>
        </div>
    }
</div>

@code {
    private SearchModel searchModel = new();

    //Logging Entries to Searchbox
    private void SearchStore()
    {
        Logger.LogInformation("SearchStore called");
        Logger.LogInformation(searchModel.Name);
    }
    public void EnterSearch()
    {
        GetSearch(searchModel.Name);
    }

    string responseBody = "";
    List<StoreApp> StoreApps = new List<StoreApp>();

    //get searchterm
    public async Task GetSearch(string search)
    {
        var apiName = "api/StoreApps/Search?searchTerm=" + search;

        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();

            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);

            StateHasChanged();
        }

    }
}








